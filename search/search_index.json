{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the Divvun Runtime Guide.</p> <p>Divvun Runtime is a modular language processing pipeline system that enables you to build sophisticated natural language processing applications using TypeScript-defined pipelines compiled to an efficient Rust runtime.</p>"},{"location":"#what-is-divvun-runtime","title":"What is Divvun Runtime?","text":"<p>Divvun Runtime provides:</p> <ul> <li>Graph-based Architecture: Define pipelines as directed acyclic graphs (DAGs)</li> <li>Modular Processing: Composable modules for morphological analysis, grammar checking, and text-to-speech</li> <li>Cross-platform Support: Rust core with Swift bindings, CLI tools, and visual development environment</li> <li>Bundle Distribution: Package pipelines with assets into distributable <code>.drb</code> files</li> </ul>"},{"location":"#primary-use-cases","title":"Primary Use Cases","text":""},{"location":"#grammar-checking","title":"Grammar Checking","text":"<p>Build complete grammar checking systems that detect spelling and grammatical errors, providing contextual suggestions.</p>"},{"location":"#text-to-speech","title":"Text-to-Speech","text":"<p>Create TTS systems that convert text to natural-sounding speech with phonological processing and normalization.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: You're reading it!</li> <li>GitHub: github.com/divvun/divvun-runtime</li> <li>Issues: Report bugs and request features on GitHub</li> </ul> <p>Let's get started with Installation.</p>"},{"location":"bundles/","title":"Bundles","text":"<p>Bundles (<code>.drb</code> files) package pipelines with their assets for distribution.</p>"},{"location":"bundles/#creating-a-bundle","title":"Creating a Bundle","text":"<pre><code>divvun-runtime bundle [OPTIONS]\n</code></pre> <p>Options: - <code>-a, --assets-path &lt;PATH&gt;</code> - Assets directory (default: <code>./assets</code>) - <code>-p, --pipeline-path &lt;PATH&gt;</code> - Pipeline file (default: <code>./pipeline.ts</code>) - <code>--skip-check</code> - Skip TypeScript type checking</p> <p>Example: <pre><code>cd my-project\ndivvun-runtime bundle\n</code></pre></p> <p>Creates <code>bundle.drb</code> with all pipelines and assets.</p>"},{"location":"bundles/#bundle-contents","title":"Bundle Contents","text":"<p>A bundle contains:</p> <ul> <li>Compiled pipeline code</li> <li>Assets directory (models, data files)</li> <li>Metadata (pipeline names, default pipeline)</li> </ul> <p>Pipelines ending in <code>_dev</code> are automatically excluded from bundles. See Pipelines for details.</p>"},{"location":"bundles/#using-bundles","title":"Using Bundles","text":""},{"location":"bundles/#run-a-bundle","title":"Run a Bundle","text":"<pre><code>divvun-runtime run bundle.drb \"input text\"\n</code></pre>"},{"location":"bundles/#list-pipelines","title":"List Pipelines","text":"<pre><code>divvun-runtime list bundle.drb\n</code></pre> <p>Output: <pre><code>Bundle bundle.drb\nPipelines 2 available\n\n\u2022 grammar-checker (default)\n\u2022 spell-only\n</code></pre></p>"},{"location":"bundles/#select-pipeline","title":"Select Pipeline","text":"<pre><code>divvun-runtime run --pipeline spell-only bundle.drb \"text\"\n</code></pre>"},{"location":"bundles/#distribution","title":"Distribution","text":"<p>Distribute the <code>.drb</code> file:</p> <ul> <li>Single file contains everything</li> <li>No external dependencies</li> <li>Cross-platform compatible</li> </ul> <p>Users run without installing project: <pre><code>divvun-runtime run your-bundle.drb \"input\"\n</code></pre></p>"},{"location":"cli/","title":"CLI Reference","text":"<p>All <code>divvun-runtime</code> commands.</p>"},{"location":"cli/#init","title":"init","text":"<p>Initialize a new pipeline project.</p> <pre><code>divvun-runtime init [path]\n</code></pre> <p>Creates <code>pipeline.ts</code> and generates type definitions in <code>.divvun-rt/</code>.</p>"},{"location":"cli/#sync","title":"sync","text":"<p>Generate TypeScript type definitions.</p> <pre><code>divvun-runtime sync [path]\n</code></pre> <p>Run after changing Cargo features or updating Divvun Runtime.</p>"},{"location":"cli/#bundle","title":"bundle","text":"<p>Create a <code>.drb</code> bundle for distribution.</p> <pre><code>divvun-runtime bundle [OPTIONS]\n</code></pre> <p>Options: - <code>-a, --assets-path &lt;PATH&gt;</code> - Assets directory (default: <code>./assets</code>) - <code>-p, --pipeline-path &lt;PATH&gt;</code> - Pipeline file (default: <code>./pipeline.ts</code>) - <code>--skip-check</code> - Skip TypeScript type checking</p> <p>Automatically excludes dev pipelines (functions ending in <code>_dev</code>).</p>"},{"location":"cli/#run","title":"run","text":"<p>Execute a pipeline.</p> <pre><code>divvun-runtime run [OPTIONS] &lt;path&gt; [input]\n</code></pre> <p>Path: Can be <code>.drb</code> bundle, <code>.ts</code> pipeline file, or directory</p> <p>Options: - <code>-p, --path &lt;PATH&gt;</code> - Alternative way to specify path - <code>-P, --pipeline &lt;NAME&gt;</code> - Select specific pipeline - <code>-c, --config &lt;KEY=VALUE&gt;</code> - Runtime configuration - <code>-o, --output-path &lt;PATH&gt;</code> - Write output to file - <code>-C, --command &lt;CMD&gt;</code> - Run command on output - <code>--skip-check</code> - Skip type checking</p> <p>Examples: <pre><code># Run from TypeScript\ndivvun-runtime run ./pipeline.ts \"text\"\n\n# Run specific pipeline\ndivvun-runtime run --pipeline spell-only ./pipeline.ts \"text\"\n\n# Run from bundle\ndivvun-runtime run bundle.drb \"text\"\n\n# With configuration\ndivvun-runtime run -c 'suggest={\"locales\":[\"fo\"]}' bundle.drb \"text\"\n\n# Save output\ndivvun-runtime run -o output.wav bundle.drb \"text\"\n</code></pre></p>"},{"location":"cli/#list","title":"list","text":"<p>List pipelines in a bundle or project.</p> <pre><code>divvun-runtime list &lt;path&gt;\n</code></pre> <p>Shows all available pipelines and marks default and dev pipelines.</p> <p>Example: <pre><code>divvun-runtime list bundle.drb\n</code></pre></p> <p>Output: <pre><code>Bundle bundle.drb\nPipelines 2 available\n\n\u2022 grammar-checker (default)\n\u2022 spell-only\n</code></pre></p>"},{"location":"cli/#configuration-syntax","title":"Configuration Syntax","text":"<p>Runtime configuration passed with <code>-c</code> flag:</p> <p>String: <pre><code>-c 'cmd-id=\"value\"'\n</code></pre></p> <p>JSON object: <pre><code>-c 'cmd-id={\"key\":\"value\",\"num\":42}'\n</code></pre></p> <p>Array: <pre><code>-c 'cmd-id=[\"val1\",\"val2\"]'\n</code></pre></p> <p>Multiple configs: <pre><code>-c 'cmd1=\"val1\"' -c 'cmd2={\"key\":\"val2\"}'\n</code></pre></p> <p>Common configurations: <pre><code># Locale selection\n-c 'suggest={\"locales\":[\"fo\",\"en\"]}'\n\n# Ignore error types\n-c 'suggest={\"ignore\":[\"typo\"]}'\n\n# UTF-16 encoding\n-c 'suggest={\"encoding\":\"utf-16\"}'\n\n# TTS speaker override\n-c 'tts-cmd={\"speaker\":1}'\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers installing Divvun Runtime on macOS and Linux.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/#all-platforms","title":"All Platforms","text":"<ul> <li>Rust toolchain: Install from rustup.rs</li> <li><code>just</code> command runner: <code>cargo install just</code></li> </ul>"},{"location":"installation/#macos","title":"macOS","text":"<pre><code># Install PyTorch (required for speech features)\nbrew install pytorch\n\n# Install ICU4C (required for text processing)\nbrew install icu4c\n</code></pre>"},{"location":"installation/#linux","title":"Linux","text":"<pre><code># Install libtorch 2.4.1+ with C++11 ABI\n# Download from https://pytorch.org/\n# Extract to /opt/libtorch\n\n# Install ICU development libraries\n# Ubuntu/Debian:\nsudo apt-get install libicu-dev\n\n# Fedora/RHEL:\nsudo dnf install icu\n</code></pre>"},{"location":"installation/#building-from-source","title":"Building from Source","text":""},{"location":"installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/divvun/divvun-runtime.git\ncd divvun-runtime\n</code></pre>"},{"location":"installation/#build-the-cli","title":"Build the CLI","text":"<pre><code># Build CLI\njust build\n\n# Install to ~/.cargo/bin\njust install\n</code></pre> <p>The CLI will be available as <code>divvun-runtime</code>.</p>"},{"location":"installation/#build-the-ui-optional","title":"Build the UI (Optional)","text":"<pre><code># Build UI\njust build-ui\n\n# Or run in development mode\njust run-ui\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<pre><code>divvun-runtime --version\n</code></pre> <p>You should see output like: <pre><code>divvun-runtime-cli 0.1.0\n</code></pre></p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that Divvun Runtime is installed, continue to the Quick Start guide to create your first pipeline.</p>"},{"location":"modules/","title":"Modules &amp; Commands","text":""},{"location":"modules/#hfst","title":"hfst","text":"<p>Morphological analysis with finite state transducers.</p> tokenize <p>Tokenize text using PMHFST model.</p> <pre><code>let x = hfst.tokenize(entry, {\n    model_path: \"tokeniser.pmhfst\"\n});\n</code></pre> <p>Input: String | Output: String (CG3 format)</p>"},{"location":"modules/#cg3","title":"cg3","text":"<p>Constraint Grammar disambiguation and processing.</p> vislcg3 <p>Apply CG3 rules from compiled grammar.</p> <pre><code>let x = cg3.vislcg3(input, {\n    model_path: \"grammar.bin\",\n    config: { trace: false }\n});\n</code></pre> <p>Input: String (CG3) | Output: String (CG3)</p> <p>Tip</p> <p>Enable tracing: <code>-c 'vislcg3={\"config\":{\"trace\":true}}'</code></p> mwesplit <p>Split multi-word expressions.</p> <pre><code>let x = cg3.mwesplit(input);\n</code></pre> <p>Input: String (CG3) | Output: String (CG3)</p> streamcmd <p>Insert CG3 stream commands (SETVAR, REMVAR).</p> <pre><code>let x = cg3.streamcmd(input, { key: \"SETVAR\" });\n</code></pre> <p>Input: String (CG3) | Output: String (CG3)</p> <p>Tip</p> <p>Configure: <code>-c 'cmd-id=\"variable=value\"'</code></p> sentences <p>Extract sentences from CG3 stream.</p> <pre><code>let sentences = cg3.sentences(input, {\n    mode: \"surface\"  // or \"phonological\" for TTS\n});\n</code></pre> <p>Input: String (CG3) | Output: ArrayString</p> to_json <p>Convert CG3 output to JSON.</p> <pre><code>let json = cg3.to_json(input);\n</code></pre> <p>Input: String (CG3) | Output: Json</p>"},{"location":"modules/#divvun","title":"divvun","text":"<p>Spell/grammar checking and suggestions.</p> blanktag <p>Analyze whitespace using HFST.</p> <pre><code>let x = divvun.blanktag(input, {\n    model_path: \"analyser-gt-whitespace.hfst\"\n});\n</code></pre> <p>Input: String (CG3) | Output: String (CG3)</p> cgspell <p>Spell check with error models.</p> <pre><code>let x = divvun.cgspell(input, {\n    err_model_path: \"errmodel.hfst\",\n    acc_model_path: \"acceptor.hfst\",\n    config: {\n        n_best: 10,\n        max_weight: 5000.0,\n        beam: 15.0,\n        recase: true\n    }\n});\n</code></pre> <p>Input: String (CG3) | Output: String (CG3 with suggestions)</p> suggest <p>Generate error report with suggestions.</p> <pre><code>let errors = divvun.suggest(input, {\n    model_path: \"generator.hfstol\"\n});\n</code></pre> <p>Input: String (CG3 with error tags) | Output: Json (error array)</p> <p>Tip</p> <p>Configure locales and filters: <code>-c 'suggest={\"locales\":[\"fo\",\"en\"],\"ignore\":[\"typo\"]}'</code></p>"},{"location":"modules/#speech","title":"speech","text":"<p>Text-to-speech synthesis.</p> <p>Note</p> <p>Speech features must be enabled during build.</p> normalize <p>Normalize text for TTS.</p> <pre><code>let x = speech.normalize(input, {\n    normalizers: { \"Sem/Plc\": \"place-norm.hfst\" },\n    generator: \"generator.hfst\",\n    analyzer: \"analyzer.hfst\"\n});\n</code></pre> <p>Input: String (CG3) | Output: String (CG3 with phonological forms)</p> phon <p>Add phonological forms.</p> <pre><code>let x = speech.phon(input, {\n    model: \"phon.hfst\",\n    tag_models: { \"Prop\": \"phon-prop.hfst\" }\n});\n</code></pre> <p>Input: String (CG3) | Output: String (CG3 with phon tags)</p> tts <p>Synthesize speech.</p> <pre><code>let audio = speech.tts(sentences, {\n    voice_model: \"voice.onnx\",\n    univnet_model: \"vocoder.onnx\",\n    speaker: 0,\n    language: 0,\n    alphabet: \"sme\"  // \"sme\", \"smj\", \"sma\", \"smi\"\n});\n</code></pre> <p>Input: String or ArrayString | Output: Bytes (WAV audio)</p> <p>Tip</p> <p>Override speaker: <code>-c 'tts-cmd={\"speaker\":1}'</code></p>"},{"location":"modules/#example","title":"example","text":"<p>Learning and demo functions.</p> reverse <p>Reverse a string.</p> <pre><code>let x = example.reverse(entry);\n</code></pre> upper <p>Convert to uppercase.</p> <pre><code>let x = example.upper(entry);\n</code></pre>"},{"location":"pipelines/","title":"Pipelines","text":"<p>Pipelines are defined by TypeScript functions that determine how text flows through processing commands.</p>"},{"location":"pipelines/#basic-pipeline","title":"Basic Pipeline","text":"<pre><code>import { StringEntry, Command } from './.divvun-rt/mod.ts';\nimport * as hfst from './.divvun-rt/hfst.ts';\nimport * as cg3 from './.divvun-rt/cg3.ts';\n\nexport default function myPipeline(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, { model_path: \"tokeniser.pmhfst\" });\n    x = cg3.vislcg3(x, { model_path: \"grammar.bin\" });\n    return x;\n}\n</code></pre> <p>This pipeline: 1. Takes string input 2. Tokenizes with HFST 3. Applies CG3 rules 4. Returns result</p>"},{"location":"pipelines/#multiple-pipelines","title":"Multiple Pipelines","text":"<p>Export multiple functions for different use cases:</p> <pre><code>// Default pipeline\nexport default function full(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, { model_path: \"tokeniser.pmhfst\" });\n    x = cg3.vislcg3(x, { model_path: \"grammar.bin\" });\n    return x;\n}\n\n// Alternative pipeline\nexport function quick(entry: StringEntry): Command {\n    return hfst.tokenize(entry, { model_path: \"tokeniser.pmhfst\" });\n}\n</code></pre> <p>Run specific pipeline: <pre><code>divvun-runtime run --pipeline quick ./pipeline.ts \"text\"\n</code></pre></p> <p>Function names convert to kebab-case: <code>myPipeline</code> \u2192 <code>my-pipeline</code></p>"},{"location":"pipelines/#dev-pipelines","title":"Dev Pipelines","text":"<p>Pipelines ending in <code>_dev</code> are development-only:</p> <pre><code>// Production - must reference files in assets/\nexport default function prod(entry: StringEntry): Command {\n    return hfst.tokenize(entry, { model_path: \"tokeniser.pmhfst\" });\n}\n\n// Dev - can reference files anywhere using @ prefix\nexport function test_dev(entry: StringEntry): Command {\n    return hfst.tokenize(entry, {\n        model_path: \"@../test-models/tokeniser.pmhfst\"\n    });\n}\n</code></pre> <p><code>@</code>-prefixed paths can be relative to the <code>pipeline.ts</code> file, or be absolute paths.</p>"},{"location":"pipelines/#path-resolution","title":"Path Resolution","text":"<p>Standard paths (both pipeline types): <pre><code>model_path: \"tokeniser.pmhfst\"  // \u2192 assets/tokeniser.pmhfst\n</code></pre></p> <p>@ prefix paths (dev pipelines only): <pre><code>model_path: \"@../shared/model.hfst\"     // Relative to pipeline.ts\nmodel_path: \"@/opt/models/model.hfst\"   // Absolute path\n</code></pre></p>"},{"location":"pipelines/#project-structure","title":"Project Structure","text":"<pre><code>my-pipeline/\n\u251c\u2500\u2500 pipeline.ts       # Your pipeline definitions\n\u251c\u2500\u2500 assets/          # Production files (included in bundles)\n\u2502   \u2514\u2500\u2500 *.hfst\n\u2514\u2500\u2500 .divvun-rt/     # Generated types\n</code></pre>"},{"location":"pipelines/#typescript-types","title":"TypeScript Types","text":"<p>Import modules and use type-safe commands:</p> <pre><code>import { StringEntry, Command } from './.divvun-rt/mod.ts';\nimport * as hfst from './.divvun-rt/hfst.ts';\nimport * as cg3 from './.divvun-rt/cg3.ts';\nimport * as divvun from './.divvun-rt/divvun.ts';\nimport * as speech from './.divvun-rt/speech.ts';\n</code></pre> <p>Types are generated by <code>divvun-runtime sync</code>.</p>"},{"location":"pipelines/#entry-types","title":"Entry Types","text":"<pre><code>import { StringEntry, BytesEntry } from './.divvun-rt/mod.ts';\n\n// String input (most common)\nexport function textPipeline(entry: StringEntry): Command { ... }\n</code></pre>"},{"location":"quick-start/","title":"Quick Start","text":"<p>We're going to build a simple text processing pipeline. By the end, you'll understand how pipelines work and be able to create your own.</p>"},{"location":"quick-start/#what-were-building","title":"What We're Building","text":"<p>A pipeline that takes text, reverses it, and converts to uppercase. Simple, but it shows how commands chain together.</p>"},{"location":"quick-start/#create-the-project","title":"Create the Project","text":"<pre><code>mkdir my-pipeline\ncd my-pipeline\ndivvun-runtime init\n</code></pre> <p>You now have <code>pipeline.ts</code> and a <code>.divvun-rt/</code> directory with TypeScript types.</p>"},{"location":"quick-start/#what-just-happened","title":"What Just Happened","text":"<p>Open <code>pipeline.ts</code> and you'll see:</p> <pre><code>import { Command, StringEntry } from './.divvun-rt/mod.ts';\nimport * as example from './.divvun-rt/example.ts';\n\nexport default function examplePipeline(entry: StringEntry): Command {\n    let x = example.reverse(entry);\n    x = example.upper(x);\n    return x;\n}\n</code></pre> <p>Breaking this down: - <code>StringEntry</code> is your input type (a string) - <code>entry</code> is the actual input text - <code>example.reverse(entry)</code> reverses the string - <code>example.upper(x)</code> uppercases it - The function returns the result</p> <p>The <code>example</code> module is just for learning. Real pipelines use <code>hfst</code>, <code>cg3</code>, <code>divvun</code>, and <code>speech</code>.</p>"},{"location":"quick-start/#run-it","title":"Run It","text":"<pre><code>divvun-runtime run ./pipeline.ts \"Hello World\"\n</code></pre> <p>Output: <pre><code>DLROW OLLEH\n</code></pre></p> <p>The text flows through: input \u2192 reverse \u2192 uppercase \u2192 output.</p>"},{"location":"quick-start/#modify-it","title":"Modify It","text":"<p>Change the pipeline to just uppercase:</p> <pre><code>export default function myPipeline(entry: StringEntry): Command {\n    return example.upper(entry);\n}\n</code></pre> <p>Run it again - now it just uppercases without reversing.</p>"},{"location":"quick-start/#use-real-modules","title":"Use Real Modules","text":"<p>The <code>example</code> module is for learning. Real pipelines look like this:</p> <pre><code>import { StringEntry, Command } from './.divvun-rt/mod.ts';\nimport * as hfst from './.divvun-rt/hfst.ts';\nimport * as cg3 from './.divvun-rt/cg3.ts';\nimport * as divvun from './.divvun-rt/divvun.ts';\n\nexport default function grammarCheck(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, { model_path: \"tokeniser.pmhfst\" });\n    x = cg3.vislcg3(x, { model_path: \"grammar.bin\" });\n    return divvun.suggest(x, { model_path: \"generator.hfstol\" });\n}\n</code></pre> <p>This tokenizes text, applies grammar rules, and generates error suggestions. You'd need to add the model files to <code>assets/</code> for this to work.</p>"},{"location":"quick-start/#what-you-learned","title":"What You Learned","text":"<ul> <li>Pipelines are TypeScript functions</li> <li>Commands chain together: one's output becomes the next's input</li> <li><code>divvun-runtime run</code> executes your pipeline</li> <li><code>.divvun-rt/</code> contains generated types for all available commands</li> </ul> <p>See Pipelines for more details, or jump to Grammar Checking or Text-to-Speech to build something real.</p>"},{"location":"grammar/config/","title":"Configuration Objects","text":"<p>Grammar checking modules accept configuration objects for tuning behavior.</p>"},{"location":"grammar/config/#divvuncgspell-configuration","title":"divvun::cgspell Configuration","text":""},{"location":"grammar/config/#spellerconfig","title":"SpellerConfig","text":"<pre><code>interface SpellerConfig {\n  n_best?: number;           // Max suggestions per word (default: 10)\n  max_weight?: number;        // Max suggestion weight (default: 5000.0)\n  beam?: number;              // Weight range (default: 15.0)\n  reweight?: {                // Edit distance penalties\n    start_penalty: number;\n    end_penalty: number;\n    mid_penalty: number;\n  };\n  node_pool_size?: number;    // Parallel processing (default: auto)\n  continuation_marker?: string; // Unfinished word marker\n  recase?: boolean;           // Try recasing (default: false)\n}\n</code></pre>"},{"location":"grammar/config/#usage","title":"Usage","text":"<pre><code>x = divvun.cgspell(x, {\n    err_model_path: \"errmodel.default.hfst\",\n    acc_model_path: \"acceptor.default.hfst\",\n    config: {\n        n_best: 10,\n        max_weight: 5000.0,\n        beam: 15.0,\n        reweight: {\n            start_penalty: 10.0,\n            end_penalty: 10.0,\n            mid_penalty: 5.0\n        },\n        recase: true\n    }\n});\n</code></pre>"},{"location":"grammar/config/#parameters-explained","title":"Parameters Explained","text":"<p>n_best: Maximum number of suggestions - Higher = more suggestions but slower - Lower = faster but fewer options - Typical: 5-15</p> <p>max_weight: Maximum edit distance weight - Higher = more distant suggestions allowed - Lower = only close matches - Typical: 3000-7000</p> <p>beam: Weight difference between best and worst suggestion - Controls quality spread - Typical: 10-20</p> <p>reweight: Edit distance penalties - <code>start_penalty</code>: Errors at word start - <code>end_penalty</code>: Errors at word end - <code>mid_penalty</code>: Errors in middle - Higher penalty = less likely suggestion</p> <p>recase: Try recasing before other suggestions - Suggests case-only changes first - Useful for proper nouns</p>"},{"location":"grammar/config/#examples","title":"Examples","text":"<p>Fast, few suggestions: <pre><code>config: {\n    n_best: 5,\n    max_weight: 3000.0,\n    beam: 10.0\n}\n</code></pre></p> <p>Thorough, many suggestions: <pre><code>config: {\n    n_best: 20,\n    max_weight: 7000.0,\n    beam: 20.0\n}\n</code></pre></p> <p>Prioritize word endings: <pre><code>config: {\n    reweight: {\n        start_penalty: 5.0,\n        end_penalty: 15.0,\n        mid_penalty: 8.0\n    }\n}\n</code></pre></p>"},{"location":"grammar/config/#cg3vislcg3-configuration","title":"cg3::vislcg3 Configuration","text":""},{"location":"grammar/config/#vislcg3config","title":"Vislcg3Config","text":"<pre><code>interface Vislcg3Config {\n  trace?: boolean;  // Enable trace output (default: false)\n}\n</code></pre>"},{"location":"grammar/config/#usage_1","title":"Usage","text":"<pre><code>x = cg3.vislcg3(x, {\n    model_path: \"grammar.bin\",\n    config: {\n        trace: true\n    }\n});\n</code></pre>"},{"location":"grammar/config/#trace-parameter","title":"trace Parameter","text":"<p>Enables detailed rule execution logging:</p> <pre><code>EXECUTE: @123 SELECT N IF (1 V)\n  MATCHED at cohort 5\n  REMOVED reading: \"word\" Adj\n</code></pre> <p>Useful for: - Debugging grammar rules - Understanding disambiguation - Developing new rules</p> <p>Warning: Generates large output. Only use during development.</p>"},{"location":"grammar/config/#divvunsuggest-runtime-configuration","title":"divvun::suggest Runtime Configuration","text":"<p>Configuration passed via <code>-c</code> flag or per-execution config:</p> <pre><code>interface SuggestRuntimeConfig {\n  locales?: string[];     // Message locale priority\n  encoding?: string;      // Position encoding: \"bytes\" | \"utf-16\"\n  ignore?: string[];      // Error types to suppress\n}\n</code></pre>"},{"location":"grammar/config/#usage_2","title":"Usage","text":"<pre><code># Set locales\ndivvun-runtime run -c 'suggest={\"locales\":[\"fo\",\"en\"]}' bundle.drb \"text\"\n\n# Set encoding\ndivvun-runtime run -c 'suggest={\"encoding\":\"utf-16\"}' bundle.drb \"text\"\n\n# Ignore errors\ndivvun-runtime run -c 'suggest={\"ignore\":[\"typo\",\"lex-*\"]}' bundle.drb \"text\"\n</code></pre>"},{"location":"grammar/config/#locales","title":"locales","text":"<p>Priority list for error messages:</p> <pre><code>-c 'suggest={\"locales\":[\"fo\",\"en\"]}'\n</code></pre> <ol> <li>Try Faroese (<code>errors-fo.ftl</code>)</li> <li>Fall back to English (<code>errors-en.ftl</code>)</li> <li>Use error tag if no message found</li> </ol>"},{"location":"grammar/config/#encoding","title":"encoding","text":"<p>Position encoding for error locations:</p> <ul> <li><code>\"bytes\"</code> (default): Byte offsets</li> <li><code>\"utf-16\"</code>: UTF-16 code units</li> </ul> <p>Use UTF-16 for JavaScript/TypeScript clients: <pre><code>const text = \"Hello world\";\nconst errPos = 6; // UTF-16 position\n</code></pre></p>"},{"location":"grammar/config/#ignore","title":"ignore","text":"<p>Suppress specific error types:</p> <pre><code># Ignore spelling errors\n-c 'suggest={\"ignore\":[\"typo\"]}'\n\n# Ignore lexical errors\n-c 'suggest={\"ignore\":[\"lex-*\"]}'\n\n# Ignore multiple types\n-c 'suggest={\"ignore\":[\"typo\",\"msyn-*\",\"lex-ta-tad\"]}'\n</code></pre> <p>Patterns support wildcards (*).</p>"},{"location":"grammar/config/#complete-example","title":"Complete Example","text":"<pre><code>import { Command, StringEntry } from './.divvun-rt/mod.ts';\nimport * as hfst from './.divvun-rt/hfst.ts';\nimport * as cg3 from './.divvun-rt/cg3.ts';\nimport * as divvun from './.divvun-rt/divvun.ts';\n\nexport default function grammarChecker(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser-gramcheck-gt-desc.pmhfst\"\n    });\n\n    x = divvun.blanktag(x, {\n        model_path: \"analyser-gt-whitespace.hfst\"\n    });\n\n    // Use trace for debugging\n    x = cg3.vislcg3(x, {\n        model_path: \"valency.bin\",\n        config: { trace: false }\n    });\n\n    x = cg3.mwesplit(x);\n    x = cg3.vislcg3(x, { model_path: \"mwe-dis.bin\" });\n\n    // Configure spell checker\n    x = divvun.cgspell(x, {\n        err_model_path: \"errmodel.default.hfst\",\n        acc_model_path: \"acceptor.default.hfst\",\n        config: {\n            n_best: 10,\n            max_weight: 5000.0,\n            beam: 15.0,\n            reweight: {\n                start_penalty: 10.0,\n                end_penalty: 10.0,\n                mid_penalty: 5.0\n            },\n            recase: true\n        }\n    });\n\n    x = cg3.vislcg3(x, { model_path: \"valency-postspell.bin\" });\n    x = cg3.vislcg3(x, { model_path: \"grammarchecker.bin\" });\n\n    // Runtime config via -c flag:\n    // -c 'suggest={\"locales\":[\"fo\",\"en\"],\"ignore\":[\"typo\"]}'\n    return divvun.suggest(x, {\n        model_path: \"generator-gramcheck-gt-norm.hfstol\"\n    });\n}\n</code></pre> <p>Run with configuration: <pre><code>divvun-runtime run \\\n  -c 'suggest={\"locales\":[\"fo\",\"en\"],\"encoding\":\"utf-16\",\"ignore\":[\"typo\"]}' \\\n  bundle.drb \\\n  \"Text to check\"\n</code></pre></p>"},{"location":"grammar/config/#performance-tuning","title":"Performance Tuning","text":""},{"location":"grammar/config/#fast-mode-fewer-suggestions","title":"Fast Mode (fewer suggestions)","text":"<pre><code>config: {\n    n_best: 5,\n    max_weight: 3000.0,\n    beam: 10.0\n}\n</code></pre>"},{"location":"grammar/config/#quality-mode-more-suggestions","title":"Quality Mode (more suggestions)","text":"<pre><code>config: {\n    n_best: 15,\n    max_weight: 6000.0,\n    beam: 18.0\n}\n</code></pre>"},{"location":"grammar/config/#balanced-default","title":"Balanced (default)","text":"<pre><code>config: {\n    n_best: 10,\n    max_weight: 5000.0,\n    beam: 15.0\n}\n</code></pre>"},{"location":"grammar/config/#next-steps","title":"Next Steps","text":"<ul> <li>See Complete Example for full setup</li> <li>Learn about Advanced Topics</li> <li>Explore Module Reference for all options</li> </ul>"},{"location":"grammar/error-system/","title":"Error System","text":"<p>Grammar checking uses three components: CG3 error tags, errors.json mapping, and Fluent message files.</p>"},{"location":"grammar/error-system/#errorsjson-mapping","title":"errors.json Mapping","text":"<p>Maps error tags to Fluent message IDs. These lists of matches may either be error IDs as emitted by the CG3 output, or a regular expression that matches those.</p>"},{"location":"grammar/error-system/#simple-mapping","title":"Simple Mapping","text":"<pre><code>{\n  \"typo\": [\n    { \"id\": \"spelling-error\" }\n  ],\n  \"agr-subj-verb\": [\n    { \"id\": \"subject-verb-agreement\" }\n  ]\n}\n</code></pre>"},{"location":"grammar/error-system/#regex-patterns","title":"Regex Patterns","text":"<pre><code>{\n  \"real-word-error\": [\n    { \"re\": \"^lex-.*\" },\n    { \"re\": \"^msyn-.*\" }\n  ]\n}\n</code></pre> <p>Matches any error tag starting with <code>lex-</code> or <code>msyn-</code>.</p>"},{"location":"grammar/error-system/#multiple-mappings","title":"Multiple Mappings","text":"<p>First match wins:</p> <pre><code>{\n  \"agreement-errors\": [\n    { \"id\": \"agr-subj-verb\" },\n    { \"id\": \"agr-noun-adj\" },\n    { \"re\": \"^agr-.*\" }\n  ]\n}\n</code></pre>"},{"location":"grammar/error-system/#fluent-message-files","title":"Fluent Message Files","text":"<p>Note</p> <p>The format used in the .ftl is unstable and subject to change, as it is presently a rudimentary port of the errors.xml functionality. Things like using \u20ac replacements are highly likely to change.</p> <p>Create <code>errors-{locale}.ftl</code> files in <code>assets/</code>:</p> <pre><code>spelling-error = Spelling error\n    .desc = The word {$1} is not in the dictionary.\n\nagr-noun-adj = Agreement error\n    .desc = The adjective {$1} should agree with the noun {$2}.\n\nmsyn-verb-form = Wrong verb form\n    .desc = After \"has\", use the past participle \"gone\" not {$1}.\n</code></pre>"},{"location":"grammar/error-system/#parameters","title":"Parameters","text":"<ul> <li><code>{$1}</code> - Error word (always available)</li> <li><code>{$2}</code>, <code>{$3}</code> - Context words from CG3 relations</li> <li><code>\u20ac1</code>, <code>\u20ac2</code> - Suggestions (replaced with actual values)</li> </ul>"},{"location":"grammar/error-system/#multi-locale-example","title":"Multi-Locale Example","text":"<p>errors-en.ftl: <pre><code>spelling-error = Spelling error\n    .desc = The word {$1} is not in the dictionary.\n</code></pre></p> <p>errors-fo.ftl: <pre><code>spelling-error = Stavavillufeilur\n    .desc = Or\u00f0i\u00f0 {$1} er ikki \u00ed or\u00f0ab\u00f3kini.\n</code></pre></p> <p>Select locale at runtime: <pre><code>divvun-runtime run -c 'suggest={\"locales\":[\"fo\",\"en\"]}' bundle.drb \"text\"\n</code></pre></p>"},{"location":"grammar/error-system/#complete-workflow","title":"Complete Workflow","text":"<ol> <li> <p>Tag error in CG3:    <pre><code>ADD (&amp;typo) ? ;\n</code></pre></p> </li> <li> <p>Map in errors.json:    <pre><code>{\n  \"typo\": [{ \"id\": \"spelling-error\" }]\n}\n</code></pre></p> </li> <li> <p>Create message in .ftl:    <pre><code>spelling-error = Spelling error\n    .desc = The word {$1} is not in the dictionary.\n</code></pre></p> </li> <li> <p>Test:    <pre><code>divvun-runtime run bundle.drb \"mispeled word\"\n</code></pre></p> </li> </ol> <p>Output: <pre><code>{\n  \"form\": \"mispeled\",\n  \"beg\": 0,\n  \"end\": 8,\n  \"err\": \"typo\",\n  \"msg\": [\"Spelling error\", \"The word mispeled is not in the dictionary.\"],\n  \"rep\": [\"misspelled\"]\n}\n</code></pre></p>"},{"location":"grammar/error-system/#error-tag-naming","title":"Error Tag Naming","text":"<p>Use consistent prefixes:</p> <ul> <li><code>typo</code> - Spelling errors</li> <li><code>msyn-*</code> - Morphosyntactic errors</li> <li><code>lex-*</code> - Lexical selection</li> <li><code>agr-*</code> - Agreement errors</li> <li><code>real-word-error</code> - Wrong word (correct spelling)</li> </ul>"},{"location":"grammar/error-system/#file-structure","title":"File Structure","text":"<pre><code>assets/\n\u251c\u2500\u2500 errors.json\n\u251c\u2500\u2500 errors-en.ftl\n\u251c\u2500\u2500 errors-fo.ftl\n\u2514\u2500\u2500 errors-sma.ftl\n</code></pre>"},{"location":"grammar/error-system/#common-patterns","title":"Common Patterns","text":""},{"location":"grammar/error-system/#spelling","title":"Spelling","text":"<pre><code>typo = Spelling error\n    .desc = The word {$1} is not in the dictionary. Try \u20ac1.\n</code></pre>"},{"location":"grammar/error-system/#grammar","title":"Grammar","text":"<pre><code>agr-subj-verb = Subject-verb agreement\n    .desc = The verb {$1} should agree with the subject.\n</code></pre>"},{"location":"grammar/error-system/#lexical","title":"Lexical","text":"<pre><code>wrong-word = Wrong word\n    .desc = Use \u20ac1 instead of {$1} in this context.\n</code></pre>"},{"location":"grammar/error-system/#error-tags-in-cg3","title":"Error Tags in CG3","text":"<p>CG3 rules tag errors using <code>&amp;</code> prefix:</p> <pre><code>ADD (&amp;typo) unknown-word ;\nADD (&amp;agr-subj-verb) verb-with-wrong-agreement ;\n</code></pre>"},{"location":"grammar/error-system/#coerror-tags","title":"COERROR Tags","text":"<p>Related errors use <code>co&amp;</code> prefix:</p> <pre><code>ADD (&amp;agr-noun-adj) Adj IF (1 N + Sg) (0 Adj + Pl) ;\nADD (co&amp;agr-noun-adj) N IF (-1 Adj + (&amp;agr-noun-adj)) ;\n</code></pre>"},{"location":"grammar/example/","title":"Complete Example","text":"<p>Complete grammar checker project from scratch.</p>"},{"location":"grammar/example/#project-structure","title":"Project Structure","text":"<pre><code>my-grammar-checker/\n\u251c\u2500\u2500 pipeline.ts\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 tokeniser-gramcheck-gt-desc.pmhfst\n\u2502   \u251c\u2500\u2500 analyser-gt-whitespace.hfst\n\u2502   \u251c\u2500\u2500 valency.bin\n\u2502   \u251c\u2500\u2500 mwe-dis.bin\n\u2502   \u251c\u2500\u2500 errmodel.default.hfst\n\u2502   \u251c\u2500\u2500 acceptor.default.hfst\n\u2502   \u251c\u2500\u2500 valency-postspell.bin\n\u2502   \u251c\u2500\u2500 grammarchecker.bin\n\u2502   \u251c\u2500\u2500 generator-gramcheck-gt-norm.hfstol\n\u2502   \u251c\u2500\u2500 errors.json\n\u2502   \u251c\u2500\u2500 errors-en.ftl\n\u2502   \u2514\u2500\u2500 errors-fo.ftl\n\u2514\u2500\u2500 .divvun-rt/          # Generated\n</code></pre>"},{"location":"grammar/example/#step-1-initialize-project","title":"Step 1: Initialize Project","text":"<pre><code>mkdir my-grammar-checker\ncd my-grammar-checker\ndivvun-runtime init\n</code></pre>"},{"location":"grammar/example/#step-2-create-pipeline","title":"Step 2: Create Pipeline","text":"<p>pipeline.ts:</p> <pre><code>import { Command, StringEntry } from './.divvun-rt/mod.ts';\nimport * as hfst from './.divvun-rt/hfst.ts';\nimport * as cg3 from './.divvun-rt/cg3.ts';\nimport * as divvun from './.divvun-rt/divvun.ts';\n\n/**\n * Complete grammar checker with spell checking.\n */\nexport default function grammarChecker(entry: StringEntry): Command {\n    // Tokenize\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser-gramcheck-gt-desc.pmhfst\"\n    });\n\n    // Whitespace analysis\n    x = divvun.blanktag(x, {\n        model_path: \"analyser-gt-whitespace.hfst\"\n    });\n\n    // Disambiguation\n    x = cg3.vislcg3(x, { model_path: \"valency.bin\" });\n\n    // MWE handling\n    x = cg3.mwesplit(x);\n    x = cg3.vislcg3(x, { model_path: \"mwe-dis.bin\" });\n\n    // Spell checking\n    x = divvun.cgspell(x, {\n        err_model_path: \"errmodel.default.hfst\",\n        acc_model_path: \"acceptor.default.hfst\",\n        config: {\n            n_best: 10,\n            max_weight: 5000.0,\n            beam: 15.0,\n            recase: true\n        }\n    });\n\n    // Post-spell processing\n    x = cg3.vislcg3(x, { model_path: \"valency-postspell.bin\" });\n\n    // Grammar checking\n    x = cg3.vislcg3(x, { model_path: \"grammarchecker.bin\" });\n\n    // Generate error report\n    return divvun.suggest(x, {\n        model_path: \"generator-gramcheck-gt-norm.hfstol\"\n    });\n}\n\n/**\n * Spell-only checker (faster).\n */\nexport function spellOnly(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser-gramcheck-gt-desc.pmhfst\"\n    });\n\n    x = divvun.cgspell(x, {\n        err_model_path: \"errmodel.default.hfst\",\n        acc_model_path: \"acceptor.default.hfst\"\n    });\n\n    return divvun.suggest(x, {\n        model_path: \"generator-gramcheck-gt-norm.hfstol\"\n    });\n}\n\n/**\n * Dev pipeline for testing with local models.\n */\nexport function localTest_dev(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, {\n        model_path: \"@../test-models/tokeniser.pmhfst\"\n    });\n\n    return divvun.suggest(x, {\n        model_path: \"@../test-models/generator.hfstol\"\n    });\n}\n</code></pre>"},{"location":"grammar/example/#step-3-create-errorsjson","title":"Step 3: Create errors.json","text":"<p>assets/errors.json:</p> <pre><code>{\n  \"real-word-error\": [\n    { \"re\": \"^lex-.*\" }\n  ],\n  \"typo\": [\n    { \"id\": \"spelling-error\" }\n  ],\n  \"msyn-verb-form\": [\n    { \"id\": \"verb-form-error\" }\n  ],\n  \"agr-subj-verb\": [\n    { \"id\": \"subject-verb-agreement\" }\n  ],\n  \"agr-noun-adj\": [\n    { \"id\": \"adjective-agreement\" }\n  ],\n  \"wrong-case\": [\n    { \"id\": \"case-error\" }\n  ]\n}\n</code></pre>"},{"location":"grammar/example/#step-4-create-fluent-files","title":"Step 4: Create Fluent Files","text":"<p>assets/errors-en.ftl:</p> <pre><code># Spelling errors\nspelling-error = Spelling error\n    .desc = The word {$1} is not in the dictionary.\n\n# Lexical errors\nreal-word-error = Wrong word\n    .desc = The word {$1} exists but seems wrong here. Try {\u20ac1}.\n\n# Verb errors\nverb-form-error = Wrong verb form\n    .desc = Use {\u20ac1} instead of {$1} after this auxiliary.\n\n# Agreement errors\nsubject-verb-agreement = Subject-verb agreement\n    .desc = The verb {$1} should agree with the subject in number.\n\nadjective-agreement = Adjective agreement\n    .desc = The adjective {$1} should agree with {$2}.\n\n# Case errors\ncase-error = Wrong case\n    .desc = Use the {\u20ac1} case here, not {$1}.\n</code></pre> <p>assets/errors-fo.ftl:</p> <pre><code># Stavavilluir\nspelling-error = Stavavillufeilur\n    .desc = Or\u00f0i\u00f0 {$1} er ikki \u00ed or\u00f0ab\u00f3kini.\n\n# Or\u00f0val\nreal-word-error = Skeivt or\u00f0\n    .desc = Or\u00f0i\u00f0 {$1} finst men s\u00e6st skeivt her. Royn {\u20ac1}.\n\n# Verbfeilir\nverb-form-error = Skeiv verbform\n    .desc = N\u00fdt {\u20ac1} \u00edsta\u00f0in fyri {$1} aftan\u00e1 hesum hj\u00e1lparverbi.\n\n# Samsvarsfeilir\nsubject-verb-agreement = Frumlag-sagnsamsv\u00f8r\n    .desc = Verbi\u00f0 {$1} skal samsvara vi\u00f0 frumlagi\u00f0 \u00ed tali.\n\nadjective-agreement = L\u00fdsingaror\u00f0ssamsv\u00f8r\n    .desc = L\u00fdsingaror\u00f0i\u00f0 {$1} skal samsvara vi\u00f0 {$2}.\n\n# Kassusfeilir\ncase-error = Skeiv kasus\n    .desc = N\u00fdt {\u20ac1} h\u00e9r, ikki {$1}.\n</code></pre>"},{"location":"grammar/example/#step-5-add-model-files","title":"Step 5: Add Model Files","text":"<p>Place your HFST and CG3 models in <code>assets/</code>:</p> <pre><code>cp /path/to/models/*.pmhfst assets/\ncp /path/to/models/*.hfst assets/\ncp /path/to/models/*.bin assets/\ncp /path/to/models/*.hfstol assets/\n</code></pre>"},{"location":"grammar/example/#step-6-test-pipeline","title":"Step 6: Test Pipeline","text":"<pre><code># Run from TypeScript\ndivvun-runtime run ./pipeline.ts \"I has went to school\"\n\n# Run spell-only\ndivvun-runtime run --pipeline spell-only ./pipeline.ts \"wrold\"\n\n# Run dev pipeline (not included in bundle)\ndivvun-runtime run --pipeline local-test ./pipeline.ts \"test\"\n</code></pre>"},{"location":"grammar/example/#step-7-create-bundle","title":"Step 7: Create Bundle","text":"<pre><code>divvun-runtime bundle\n</code></pre> <p>Output: <pre><code>Skipping 1 dev pipeline(s): local-test\nType checking pipeline.ts\nValidating assets\nCreating bundle.drb\nDone\n</code></pre></p>"},{"location":"grammar/example/#step-8-test-bundle","title":"Step 8: Test Bundle","text":"<pre><code># Default pipeline\ndivvun-runtime run bundle.drb \"I has went to school\"\n\n# With configuration\ndivvun-runtime run \\\n  -c 'suggest={\"locales\":[\"fo\",\"en\"],\"ignore\":[\"typo\"]}' \\\n  bundle.drb \\\n  \"Text to check\"\n\n# List available pipelines\ndivvun-runtime list bundle.drb\n</code></pre> <p>Output: <pre><code>Bundle bundle.drb\nPipelines 2 available\n\n\u2022 grammar-checker (default)\n\u2022 spell-only\n</code></pre></p>"},{"location":"grammar/example/#expected-output","title":"Expected Output","text":"<p>Input: \"I has went to school\"</p> <p>Output: <pre><code>[\n  {\n    \"form\": \"has went\",\n    \"beg\": 2,\n    \"end\": 10,\n    \"err\": \"msyn-verb-form\",\n    \"msg\": [\n      \"Wrong verb form\",\n      \"Use gone instead of went after this auxiliary.\"\n    ],\n    \"rep\": [\"has gone\"]\n  }\n]\n</code></pre></p>"},{"location":"grammar/example/#development-workflow","title":"Development Workflow","text":"<ol> <li>Edit grammar rules: Modify CG3 .bin files</li> <li>Update errors: Add new error tags</li> <li>Map errors: Update errors.json</li> <li>Add messages: Update .ftl files</li> <li>Test: Run pipeline with test cases</li> <li>Bundle: Create production bundle</li> <li>Distribute: Share bundle.drb</li> </ol>"},{"location":"grammar/example/#testing-strategy","title":"Testing Strategy","text":"<p>Create test file:</p> <p>test-cases.txt: <pre><code>I has went to school\nThe big houses is red\nShe dont like pizza\n</code></pre></p> <p>Run tests: <pre><code>while IFS= read -r line; do\n    echo \"Testing: $line\"\n    divvun-runtime run bundle.drb \"$line\"\ndone &lt; test-cases.txt\n</code></pre></p>"},{"location":"grammar/example/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Topics</li> <li>Explore Module Reference</li> <li>See Configuration options</li> </ul>"},{"location":"grammar/overview/","title":"Grammar Checking Overview","text":"<p>Grammar checking in Divvun Runtime combines morphological analysis, disambiguation, spell checking, and grammar rule application to detect and correct errors in text.</p>"},{"location":"grammar/overview/#what-is-grammar-checking","title":"What is Grammar Checking?","text":"<p>Grammar checking is a multi-stage pipeline that:</p> <ol> <li>Tokenizes text into analyzable units</li> <li>Analyzes word forms morphologically</li> <li>Disambiguates readings using context</li> <li>Checks spelling and generates corrections</li> <li>Applies grammar rules to detect errors</li> <li>Generates suggestions for corrections</li> </ol>"},{"location":"grammar/overview/#output-format","title":"Output Format","text":"<p>Grammar checkers return JSON with error information:</p> <pre><code>[\n  {\n    \"form\": \"wrod\",\n    \"beg\": 0,\n    \"end\": 4,\n    \"err\": \"typo\",\n    \"msg\": [\"Spelling error\", \"Word not in dictionary\"],\n    \"rep\": [\"word\", \"world\", \"wor\"]\n  },\n  {\n    \"form\": \"has went\",\n    \"beg\": 10,\n    \"end\": 18,\n    \"err\": \"msyn-verb-form\",\n    \"msg\": [\"Wrong verb form\", \"Use 'gone' after 'has'\"],\n    \"rep\": [\"has gone\"]\n  }\n]\n</code></pre>"},{"location":"grammar/overview/#pipeline-architecture","title":"Pipeline Architecture","text":"<p>A typical grammar checker pipeline includes:</p> <pre><code>export default function grammarChecker(entry: StringEntry): Command {\n    // Stage 1: Tokenization\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser-gramcheck-gt-desc.pmhfst\"\n    });\n\n    // Stage 2: Whitespace analysis\n    x = divvun.blanktag(x, {\n        model_path: \"analyser-gt-whitespace.hfst\"\n    });\n\n    // Stage 3: Disambiguation\n    x = cg3.vislcg3(x, { model_path: \"valency.bin\" });\n\n    // Stage 4: MWE handling\n    x = cg3.mwesplit(x);\n    x = cg3.vislcg3(x, { model_path: \"mwe-dis.bin\" });\n\n    // Stage 5: Spell checking\n    x = divvun.cgspell(x, {\n        err_model_path: \"errmodel.default.hfst\",\n        acc_model_path: \"acceptor.default.hfst\"\n    });\n\n    // Stage 6: Post-spell disambiguation\n    x = cg3.vislcg3(x, { model_path: \"valency-postspell.bin\" });\n\n    // Stage 7: Grammar checking\n    x = cg3.vislcg3(x, { model_path: \"grammarchecker.bin\" });\n\n    // Stage 8: Generate suggestions\n    return divvun.suggest(x, {\n        model_path: \"generator-gramcheck-gt-norm.hfstol\"\n    });\n}\n</code></pre>"},{"location":"grammar/overview/#key-components","title":"Key Components","text":""},{"location":"grammar/overview/#1-error-tagging","title":"1. Error Tagging","text":"<p>CG3 rules mark errors with special tags: <pre><code>ADD (&amp;typo) target-pattern ;\nADD (&amp;agreement-error) noun-pattern ;\n</code></pre></p>"},{"location":"grammar/overview/#2-errorsjson-mapping","title":"2. errors.json Mapping","text":"<p>Maps error tags to Fluent message IDs: <pre><code>{\n  \"typo\": [{ \"id\": \"spelling-error\" }],\n  \"agreement-error\": [{ \"re\": \"^agr-.*\" }]\n}\n</code></pre></p>"},{"location":"grammar/overview/#3-fluent-message-files","title":"3. Fluent Message Files","text":"<p>Localized error messages: <pre><code>spelling-error = Spelling error\n    .desc = The word {$1} is not in the dictionary.\n\nagr-noun-adj = Agreement error\n    .desc = The adjective {$1} should agree with the noun {$2}.\n</code></pre></p>"},{"location":"grammar/overview/#required-assets","title":"Required Assets","text":"<p>A grammar checker project needs:</p> <pre><code>assets/\n\u251c\u2500\u2500 tokeniser-gramcheck-gt-desc.pmhfst\n\u251c\u2500\u2500 analyser-gt-whitespace.hfst\n\u251c\u2500\u2500 valency.bin\n\u251c\u2500\u2500 mwe-dis.bin\n\u251c\u2500\u2500 errmodel.default.hfst\n\u251c\u2500\u2500 acceptor.default.hfst\n\u251c\u2500\u2500 valency-postspell.bin\n\u251c\u2500\u2500 grammarchecker.bin\n\u251c\u2500\u2500 generator-gramcheck-gt-norm.hfstol\n\u251c\u2500\u2500 errors.json\n\u251c\u2500\u2500 errors-en.ftl\n\u2514\u2500\u2500 errors-{locale}.ftl\n</code></pre>"},{"location":"grammar/overview/#workflow-example","title":"Workflow Example","text":"<p>Input text: \"I has went to school\"</p> <p>Stage 1 - Tokenize: Break into words <pre><code>\"&lt;I&gt;\"\n\"&lt;has&gt;\"\n\"&lt;went&gt;\"\n\"&lt;to&gt;\"\n\"&lt;school&gt;\"\n</code></pre></p> <p>Stage 2-4 - Analyze &amp; Disambiguate: Add linguistic analysis <pre><code>\"&lt;has&gt;\"\n    \"have\" V Prs Sg3\n\"&lt;went&gt;\"\n    \"go\" V Past\n</code></pre></p> <p>Stage 5 - Check Grammar: Detect \"has went\" error <pre><code>\"&lt;has&gt;\"\n    \"have\" V Prs Sg3 &amp;verb-form-error\n</code></pre></p> <p>Stage 6 - Generate Output: Create error report <pre><code>{\n  \"form\": \"has went\",\n  \"err\": \"verb-form-error\",\n  \"msg\": [\"Wrong verb form\", \"Use 'gone' after 'has'\"],\n  \"rep\": [\"has gone\"]\n}\n</code></pre></p>"},{"location":"grammar/overview/#runtime-configuration","title":"Runtime Configuration","text":"<p>Configure at runtime with <code>-c</code> flag:</p> <pre><code># Set locales for error messages\ndivvun-runtime run -c 'suggest={\"locales\":[\"fo\",\"en\"]}' bundle.drb \"text\"\n\n# Ignore specific error types\ndivvun-runtime run -c 'suggest={\"ignore\":[\"typo\"]}' bundle.drb \"text\"\n\n# Use UTF-16 encoding for positions\ndivvun-runtime run -c 'suggest={\"encoding\":\"utf-16\"}' bundle.drb \"text\"\n</code></pre>"},{"location":"grammar/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Understand the Error System</li> <li>Configure command options</li> <li>See Complete Example</li> </ul>"},{"location":"reference/configuration/","title":"Configuration Reference","text":"<p>Runtime configuration options for commands and modules.</p>"},{"location":"reference/configuration/#command-configuration","title":"Command Configuration","text":"<p>Commands accept configuration objects in TypeScript:</p> <pre><code>let x = command(input, {\n    required_param: \"value\",\n    optional_config: {\n        option1: true,\n        option2: 42\n    }\n});\n</code></pre>"},{"location":"reference/configuration/#runtime-configuration","title":"Runtime Configuration","text":"<p>Override configuration when running bundles:</p> <pre><code>divvun-runtime run -c 'cmd-id={config}' bundle.drb \"input\"\n</code></pre>"},{"location":"reference/configuration/#syntax","title":"Syntax","text":"<p>String: <pre><code>-c 'cmd-id=\"value\"'\n</code></pre></p> <p>JSON object: <pre><code>-c 'cmd-id={\"key\":\"value\",\"num\":42}'\n</code></pre></p> <p>Array: <pre><code>-c 'cmd-id=[\"val1\",\"val2\"]'\n</code></pre></p> <p>Multiple configs: <pre><code>-c 'cmd1=\"val1\"' -c 'cmd2={\"key\":\"val2\"}'\n</code></pre></p>"},{"location":"reference/configuration/#common-configurations","title":"Common Configurations","text":""},{"location":"reference/configuration/#suggest-module","title":"suggest Module","text":"<p>Locale selection: <pre><code>-c 'suggest={\"locales\":[\"fo\",\"en\"]}'\n</code></pre></p> <p>Ignore error types: <pre><code>-c 'suggest={\"ignore\":[\"typo\"]}'\n</code></pre></p> <p>UTF-16 encoding: <pre><code>-c 'suggest={\"encoding\":\"utf-16\"}'\n</code></pre></p>"},{"location":"reference/configuration/#cg3vislcg3","title":"cg3.vislcg3","text":"<p>Enable tracing: <pre><code>config: { trace: true }\n</code></pre></p> <p>Or at runtime: <pre><code>-c 'vislcg3={\"config\":{\"trace\":true}}'\n</code></pre></p>"},{"location":"reference/configuration/#divvuncgspell","title":"divvun.cgspell","text":"<p>Tuning parameters: <pre><code>config: {\n    n_best: 10,          // Max suggestions\n    max_weight: 5000.0,  // Max edit distance\n    beam: 15.0,          // Quality range\n    recase: true         // Try case changes first\n}\n</code></pre></p>"},{"location":"reference/configuration/#speechtts","title":"speech.tts","text":"<p>Speaker override: <pre><code>-c 'tts-cmd={\"speaker\":1}'\n</code></pre></p>"},{"location":"reference/configuration/#configuration-layers","title":"Configuration Layers","text":"<p>Configuration merges in order:</p> <ol> <li>Default values - Built-in defaults</li> <li>Pipeline config - TypeScript configuration objects</li> <li>Runtime config - CLI <code>-c</code> flags</li> </ol> <p>Runtime config overrides pipeline config.</p>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions.</p>"},{"location":"reference/troubleshooting/#type-checking-issues","title":"Type Checking Issues","text":""},{"location":"reference/troubleshooting/#module-not-found","title":"Module not found","text":"<p>Error: <pre><code>error: Cannot find module './.divvun-rt/hfst.ts'\n</code></pre></p> <p>Solution: Run sync to generate types: <pre><code>divvun-runtime sync\n</code></pre></p>"},{"location":"reference/troubleshooting/#wrong-command-signature","title":"Wrong command signature","text":"<p>Error: <pre><code>error: Property 'model_path' is missing\n</code></pre></p> <p>Solution: Check command parameters in Modules &amp; Commands or generated <code>.divvun-rt/</code> types.</p>"},{"location":"reference/troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"reference/troubleshooting/#file-not-found","title":"File not found","text":"<p>Error: <pre><code>Error: Asset not found: tokeniser.pmhfst\n</code></pre></p> <p>Solution: Verify file exists in <code>assets/</code> directory: <pre><code>ls assets/tokeniser.pmhfst\n</code></pre></p>"},{"location":"reference/troubleshooting/#message-not-found","title":"Message not found","text":"<p>Error: <pre><code>Warning: Message ID 'typo' not found in locale 'en'\n</code></pre></p> <p>Solution: Add message to <code>errors-en.ftl</code>: <pre><code>typo = Spelling error\n    .desc = The word {$1} is not in the dictionary.\n</code></pre></p>"},{"location":"reference/troubleshooting/#wrong-locale-messages","title":"Wrong locale messages","text":"<p>Messages appear in wrong language.</p> <p>Solution: Set locale priority: <pre><code>divvun-runtime run -c 'suggest={\"locales\":[\"fo\",\"en\"]}' bundle.drb \"text\"\n</code></pre></p>"},{"location":"reference/troubleshooting/#pipeline-not-found","title":"Pipeline not found","text":"<p>Error: <pre><code>Error: Pipeline 'spellOnly' not found\n</code></pre></p> <p>Solution: List available pipelines: <pre><code>divvun-runtime list bundle.drb\n</code></pre></p> <p>Use exact pipeline name: <pre><code>divvun-runtime run --pipeline spell-only bundle.drb \"text\"\n</code></pre></p>"},{"location":"reference/troubleshooting/#debug-logging","title":"Debug Logging","text":"<p>Enable detailed logging:</p> <pre><code>RUST_LOG=divvun_runtime=debug divvun-runtime run bundle.drb \"input\"\n</code></pre> <p>Module-specific logging: <pre><code>export RUST_LOG=divvun_runtime::modules::cg3=trace\n</code></pre></p>"},{"location":"reference/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If issues persist:</p> <ol> <li>Check Configuration Reference</li> <li>Review CLI Reference</li> <li>Search GitHub issues</li> <li>File a bug report with:</li> <li>Command used</li> <li>Full error message</li> <li>Platform (macOS/Linux)</li> <li>Rust version (<code>rustc --version</code>)</li> </ol>"},{"location":"tts/example/","title":"Complete TTS Example","text":"<p>Full text-to-speech pipeline from text to audio.</p>"},{"location":"tts/example/#pipeline","title":"Pipeline","text":"<pre><code>import { Command, StringEntry } from './.divvun-rt/mod.ts';\nimport * as hfst from './.divvun-rt/hfst.ts';\nimport * as cg3 from './.divvun-rt/cg3.ts';\nimport * as speech from './.divvun-rt/speech.ts';\n\nexport default function tts(entry: StringEntry): Command {\n    // Tokenize\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser.pmhfst\"\n    });\n\n    // Apply grammar rules\n    x = cg3.vislcg3(x, {\n        model_path: \"disambiguator.bin\"\n    });\n\n    // Normalize for speech\n    x = speech.normalize(x, {\n        normalizers: {\n            \"Sem/Plc\": \"place-norm.hfst\",\n            \"Sem/Obj\": \"obj-norm.hfst\"\n        },\n        generator: \"generator.hfst\",\n        analyzer: \"analyzer.hfst\"\n    });\n\n    // Add phonology\n    x = speech.phon(x, {\n        model: \"phon.hfst\",\n        tag_models: {\n            \"Prop\": \"phon-prop.hfst\"\n        }\n    });\n\n    // Extract sentences\n    let sentences = cg3.sentences(x, {\n        mode: \"phonological\"\n    });\n\n    // Synthesize\n    return speech.tts(sentences, {\n        voice_model: \"voice.onnx\",\n        univnet_model: \"vocoder.onnx\",\n        speaker: 0,\n        language: 0,\n        alphabet: \"sme\"\n    });\n}\n</code></pre>"},{"location":"tts/example/#assets-structure","title":"Assets Structure","text":"<pre><code>assets/\n\u251c\u2500\u2500 tokeniser.pmhfst\n\u251c\u2500\u2500 disambiguator.bin\n\u251c\u2500\u2500 place-norm.hfst\n\u251c\u2500\u2500 obj-norm.hfst\n\u251c\u2500\u2500 generator.hfst\n\u251c\u2500\u2500 analyzer.hfst\n\u251c\u2500\u2500 phon.hfst\n\u251c\u2500\u2500 phon-prop.hfst\n\u251c\u2500\u2500 voice.onnx\n\u2514\u2500\u2500 univnet.onnx\n</code></pre>"},{"location":"tts/example/#running","title":"Running","text":"<p>Generate audio file:</p> <pre><code>divvun-runtime run -o output.wav ./pipeline.ts \"Text to synthesize\"\n</code></pre> <p>Play audio:</p> <pre><code>afplay output.wav  # macOS\naplay output.wav   # Linux\n</code></pre>"},{"location":"tts/example/#configuration","title":"Configuration","text":"<p>Override speaker at runtime:</p> <pre><code>divvun-runtime run -c 'tts-cmd={\"speaker\":1}' -o output.wav bundle.drb \"text\"\n</code></pre>"},{"location":"tts/example/#testing","title":"Testing","text":"<p>Test individual stages:</p> <pre><code>// Test normalization only\nexport function normalize_dev(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser.pmhfst\"\n    });\n    x = speech.normalize(x, {\n        normalizers: { \"Sem/Plc\": \"place-norm.hfst\" },\n        generator: \"generator.hfst\",\n        analyzer: \"analyzer.hfst\"\n    });\n    return cg3.to_json(x);  // Output as JSON to inspect\n}\n\n// Test phonology\nexport function phon_dev(entry: StringEntry): Command {\n    let x = hfst.tokenize(entry, {\n        model_path: \"tokeniser.pmhfst\"\n    });\n    x = speech.phon(x, {\n        model: \"phon.hfst\",\n        tag_models: {}\n    });\n    return cg3.to_json(x);\n}\n</code></pre> <p>Run dev pipelines:</p> <pre><code>divvun-runtime run --pipeline normalize_dev ./pipeline.ts \"Dr. Smith visited 123 Main St.\"\ndivvun-runtime run --pipeline phon_dev ./pipeline.ts \"hello world\"\n</code></pre>"},{"location":"tts/example/#common-issues","title":"Common Issues","text":""},{"location":"tts/example/#missing-libtorch","title":"Missing libtorch","text":"<pre><code>error: linking with `cc` failed\n</code></pre> <p>Solution: Install libtorch and set LIBTORCH: <pre><code>export LIBTORCH=/opt/homebrew\ncargo build --features mod-speech\n</code></pre></p>"},{"location":"tts/example/#wrong-alphabet","title":"Wrong Alphabet","text":"<p>Audio sounds incorrect.</p> <p>Solution: Verify alphabet matches your language: <pre><code>alphabet: \"sme\"  // Must match voice model\n</code></pre></p>"},{"location":"tts/example/#incomplete-normalization","title":"Incomplete Normalization","text":"<p>Numbers or abbreviations not converted.</p> <p>Solution: Add normalizer models for missing tags: <pre><code>normalizers: {\n    \"Sem/Plc\": \"place-norm.hfst\",\n    \"Sem/Obj\": \"obj-norm.hfst\",\n    \"Sem/Date\": \"date-norm.hfst\"\n}\n</code></pre></p>"},{"location":"tts/overview/","title":"Text-to-Speech Overview","text":"<p>Text-to-speech (TTS) synthesis converts text to audio using neural models.</p>"},{"location":"tts/overview/#requirements","title":"Requirements","text":"<p>TTS requires the <code>mod-speech</code> feature:</p> <pre><code>export LIBTORCH=/opt/homebrew  # macOS\n# or\nexport LIBTORCH=/opt/libtorch   # Linux\n\ncargo build --features mod-speech\ndivvun-runtime sync\n</code></pre>"},{"location":"tts/overview/#pipeline-flow","title":"Pipeline Flow","text":"<pre><code>Text \u2192 Tokenize \u2192 Normalize \u2192 Phonology \u2192 Sentences \u2192 TTS \u2192 Audio\n</code></pre> <ol> <li>Tokenize - Split text into morphological units (hfst.tokenize)</li> <li>Normalize - Convert numbers, abbreviations to words (speech.normalize)</li> <li>Phonology - Add phonological forms (speech.phon)</li> <li>Sentences - Extract sentence strings (cg3.sentences)</li> <li>TTS - Synthesize speech (speech.tts)</li> </ol>"},{"location":"tts/overview/#speech-modules","title":"Speech Modules","text":""},{"location":"tts/overview/#speechnormalize","title":"speech.normalize","text":"<p>Normalize text for speech:</p> <pre><code>let x = speech.normalize(input, {\n    normalizers: { \"Sem/Plc\": \"place-norm.hfst\" },\n    generator: \"generator.hfst\",\n    analyzer: \"analyzer.hfst\"\n});\n</code></pre> <p>Converts: - Numbers to words (123 \u2192 \"one hundred twenty-three\") - Abbreviations to full forms (Dr. \u2192 \"Doctor\") - Special tags to appropriate forms</p>"},{"location":"tts/overview/#speechphon","title":"speech.phon","text":"<p>Add phonological representations:</p> <pre><code>let x = speech.phon(input, {\n    model: \"phon.hfst\",\n    tag_models: { \"Prop\": \"phon-prop.hfst\" }\n});\n</code></pre> <p>Generates pronunciation forms for synthesis.</p>"},{"location":"tts/overview/#speechtts","title":"speech.tts","text":"<p>Synthesize audio:</p> <pre><code>let audio = speech.tts(sentences, {\n    voice_model: \"voice.onnx\",\n    univnet_model: \"vocoder.onnx\",\n    speaker: 0,\n    language: 0,\n    alphabet: \"sme\"  // \"sme\", \"smj\", \"sma\", \"smi\"\n});\n</code></pre> <p>Returns WAV audio bytes.</p>"},{"location":"tts/overview/#sentence-extraction","title":"Sentence Extraction","text":"<p>Extract sentences with phonological forms:</p> <pre><code>let sentences = cg3.sentences(input, {\n    mode: \"phonological\"\n});\n</code></pre> <p>Returns array of sentence strings ready for TTS.</p>"},{"location":"tts/overview/#supported-languages","title":"Supported Languages","text":"<p>Current alphabet options: - <code>sme</code> - Northern Sami - <code>smj</code> - Lule Sami - <code>sma</code> - Southern Sami - <code>smi</code> - Generic Sami</p>"},{"location":"tts/overview/#audio-output","title":"Audio Output","text":"<p>TTS returns bytes (WAV format). Save to file:</p> <pre><code>divvun-runtime run -o output.wav bundle.drb \"text to speak\"\n</code></pre> <p>Or process further in TypeScript.</p>"}]}